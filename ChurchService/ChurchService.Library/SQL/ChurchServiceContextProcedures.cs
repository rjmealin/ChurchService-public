// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ChurchService.Library.SQL;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ChurchService.Library.SQL
{
    public partial class ChurchServiceContext
    {
        private IChurchServiceContextProcedures _procedures;

        public virtual IChurchServiceContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ChurchServiceContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IChurchServiceContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetAvailableMembersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<testResult>().HasNoKey().ToView(null);
        }
    }

    public partial class ChurchServiceContextProcedures : IChurchServiceContextProcedures
    {
        private readonly ChurchServiceContext _context;

        public ChurchServiceContextProcedures(ChurchServiceContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetAvailableMembersResult>> GetAvailableMembersAsync(DateTime? visitDate, Guid? churchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "visitDate",
                    Value = visitDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "churchId",
                    Value = churchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAvailableMembersResult>("EXEC @returnValue = [dbo].[GetAvailableMembers] @visitDate, @churchId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<testResult>> testAsync(Guid? churchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "churchId",
                    Value = churchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<testResult>("EXEC @returnValue = [dbo].[test] @churchId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
