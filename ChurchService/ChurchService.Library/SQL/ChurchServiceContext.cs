// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace ChurchService.Library.SQL
{
    public partial class ChurchServiceContext : DbContext
    {
        public ChurchServiceContext()
        {
        }

        public ChurchServiceContext(DbContextOptions<ChurchServiceContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Church> Churches { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<PlannedVisit> PlannedVisits { get; set; }
        public virtual DbSet<UnavailableDate> UnavailableDates { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserEmailVerification> UserEmailVerifications { get; set; }
        public virtual DbSet<UserPasswordReset> UserPasswordResets { get; set; }
        public virtual DbSet<UserSmsVerification> UserSmsVerifications { get; set; }
        public virtual DbSet<VisitorCard> VisitorCards { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                IConfigurationRoot configuration = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("appsettings.json")
                    .Build();
                var connectionString = configuration.GetConnectionString("ChurchServiceProd");
                //var connectionString = configuration.GetConnectionString("ChurchServiceLocal");
                optionsBuilder.UseSqlServer(connectionString);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Church>(entity =>
            {
                entity.Property(e => e.ChurchId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChurchLogoMime).HasColumnName("ChurchLogoMIME");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<ErrorLog>(entity =>
            {
                entity.Property(e => e.ErrorLogId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.ExceptionMessage).IsRequired();

                entity.Property(e => e.StackTrace).IsRequired();

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");

                entity.Property(e => e.Url).HasColumnName("URL");

                entity.Property(e => e.UserIpAddress).HasMaxLength(50);
            });

            modelBuilder.Entity<PlannedVisit>(entity =>
            {
                entity.Property(e => e.PlannedVisitId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.VisitDate).HasColumnType("datetime");

                entity.HasOne(d => d.AssignedUser)
                    .WithMany(p => p.PlannedVisits)
                    .HasForeignKey(d => d.AssignedUserId)
                    .HasConstraintName("FK_PlannedVisit_AssignedUser");

                entity.HasOne(d => d.Church)
                    .WithMany(p => p.PlannedVisits)
                    .HasForeignKey(d => d.ChurchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlannedVisit_Church");
            });

            modelBuilder.Entity<UnavailableDate>(entity =>
            {
                entity.Property(e => e.UnavailableDateId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.DateUnavailable).HasColumnType("date");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UnavailableDates)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_unavaiable");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.Email).IsRequired();

                entity.Property(e => e.Password).IsRequired();

                entity.Property(e => e.Phone).IsRequired();

                entity.Property(e => e.ProfileImageMime).HasColumnName("ProfileImageMIME");

                entity.Property(e => e.RemovedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Church)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.ChurchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Church");
            });

            modelBuilder.Entity<UserEmailVerification>(entity =>
            {
                entity.Property(e => e.UserEmailVerificationId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.Expiration).HasColumnType("datetime");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserEmailVerifications)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserEmailVerifications_User");
            });

            modelBuilder.Entity<UserPasswordReset>(entity =>
            {
                entity.Property(e => e.UserPasswordResetId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.Expiration).HasColumnType("datetime");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserPasswordResets)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_UserPasswordResets");
            });

            modelBuilder.Entity<UserSmsVerification>(entity =>
            {
                entity.Property(e => e.UserSmsVerificationId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.Expiration).HasColumnType("datetime");

                entity.Property(e => e.PhoneNumber).IsRequired();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserSmsVerifications)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserSmsVerifications_User");
            });

            modelBuilder.Entity<VisitorCard>(entity =>
            {
                entity.Property(e => e.VisitorCardId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.DateOfAttendance).HasColumnType("datetime");

                entity.HasOne(d => d.Church)
                    .WithMany(p => p.VisitorCards)
                    .HasForeignKey(d => d.ChurchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VisitorCard_Church");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}